{"version":3,"sources":["components/QuoteMachine.js","containers/App.js","serviceWorker.js","index.js"],"names":["theme","createMuiTheme","typography","fontSize","fontFamily","join","useStyles","makeStyles","button","background","border","borderRadius","boxShadow","color","height","QuoteMachine","selectedQuote","handleClick","Card","CardContent","ThemeProvider","Typography","id","align","quote","author","CardActions","Button","className","size","onClick","IconButton","target","href","encodeURI","icon","faTwitter","data-action","faWhatsapp","App","props","state","quotes","quoteIndex","bind","fetch","then","response","json","setState","this","Math","floor","random","length","Grid","classes","container","justify","xs","ls","item","footer","faGithub","Number","isInteger","Component","withStyles","alignItems","display","overflow","padding","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b49e8f2e.chunk.js","sourcesContent":["import React from 'react'\nimport 'typeface-roboto';\nimport Typography from '@material-ui/core/Typography'\nimport Card from '@material-ui/core/Card'\nimport CardActions from '@material-ui/core/CardActions'\nimport CardContent from '@material-ui/core/CardContent'\nimport Button from '@material-ui/core/Button'\nimport IconButton from '@material-ui/core/IconButton';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTwitter, faWhatsapp } from '@fortawesome/free-brands-svg-icons';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\n\n\nconst theme = createMuiTheme({\n  typography: {\n    fontSize: 20,\n    fontFamily: [\n      '\"Apple Color Emoji\"',\n      '\"Segoe UI Emoji\"',\n      '\"Segoe UI Symbol\"',\n    ].join(','),\n  },\n});\n\nconst useStyles = makeStyles({\n  button: {\n    background: 'linear-gradient(45deg, #58cdfd 30%, #58cdfd 90%)',\n    border: 0,\n    borderRadius: 9,\n    boxShadow: '0 3px 5px 2px rgba(169, 247, 215, .3)',\n    color: 'gray',\n    height: 48,\n  },\n});\n\n\nconst QuoteMachine = ({ selectedQuote, handleClick }) => (\n  <Card>\n    <CardContent>\n    <ThemeProvider theme={theme}>\n      <Typography id=\"text\" color=\"textSecondary\" align=\"center\">\n       \"{selectedQuote.quote}\"  <br /><br /><Typography id=\"author\" align=\"right\">{selectedQuote.author}</Typography>\n      </Typography>\n    </ThemeProvider>\n    </CardContent>\n    <CardActions>\n      <Button className={useStyles().button} id=\"new-quote\" size=\"small\" onClick={handleClick}>Next Quote</Button>\n      <IconButton\n        id=\"tweet-quote\"\n        target=\"_blank\"\n        href={encodeURI(`https://twitter.com/intent/tweet?text=\"${selectedQuote.quote}\"&hashtags=${selectedQuote.author},randomQuoteMachine` )}\n      >\n        <FontAwesomeIcon icon={faTwitter} size=\"md\"></FontAwesomeIcon>\n      </IconButton>\n      <IconButton\n        id=\"whatsapp-quote\"\n        target=\"_blank\"\n        href={`https://web.whatsapp.com/send?text=\"${selectedQuote.quote}\" - ${selectedQuote.author}`}\n        data-action={\"share/whatsapp/share\"}\n      >\n        <FontAwesomeIcon icon={faWhatsapp} size=\"md\"></FontAwesomeIcon>\n      </IconButton>\n    </CardActions>\n  </Card>\n)\n\nexport default QuoteMachine;\n\n\n\n","import React, { Component } from 'react';\nimport 'typeface-roboto';\nimport { Grid } from '@material-ui/core';\nimport { withStyles } from '@material-ui/core/styles';\nimport QuoteMachine from '../components/QuoteMachine';\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport IconButton from '@material-ui/core/IconButton';\n\n\nconst styles = {\n  container: {\n    alignItems: 'center',\n    display: 'flex',\n    height: '92.7vh',\n    background: 'linear-gradient(45deg, #5e63fe 30%, #04e4da 90%)',\n    overflow: 'hidden',\n  },\n  footer: {\n    background: 'linear-gradient(45deg, #5e63fe 100%, #04e4da 40%)',\n    display: 'flex',\n    padding: '0 50% 0',\n  }\n}\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      quotes: [],\n      quoteIndex: null\n    }\n    // it's poddible use ES7 to avoid this\n    this.quoteIndex = this.quoteIndex.bind(this)\n    this.handleClick = this.handleClick.bind(this)\n  }\n  componentDidMount() {\n    fetch('https://gist.githubusercontent.com/natebass/b0a548425a73bdf8ea5c618149fe1fce/raw/f4231cd5961f026264bb6bb3a6c41671b044f1f4/quotes.json')\n    .then(response => response.json())\n    .then(quotes => this.setState({ quotes }, this.handleClick ))\n  }\n\n  handleClick(){\n    this.setState({\n      quoteIndex : this.quoteIndex()\n    })\n  }\n\n  // - ES6 -\n  get selectedQuote(){\n    if(!this.state.quotes.length || !Number.isInteger(this.state.quoteIndex)) return undefined;\n    return this.state.quotes[this.state.quoteIndex]\n  }\n\n  quoteIndex() {\n    // it's possible use libray lodash (npm install lodash && import {random} from 'lodash')\n    const index = Math.floor(Math.random() * this.state.quotes.length)\n    return index\n  }\n\n\n  render() {\n    return (\n      <>\n        <Grid className={this.props.classes.container} id=\"quote-box\" justify=\"center\" container>\n          <Grid xs={6} ls={6} item>\n            {\n              this.selectedQuote ?\n              <QuoteMachine selectedQuote={this.selectedQuote} handleClick={this.handleClick} /> \n              : null       \n            }  \n          </Grid>\n        </Grid>\n        <footer className={this.props.classes.footer} footer>\n          <IconButton\n            id=\"Github-icon\"\n            target=\"_blank\"\n            href=\"https://github.com/jtarulla/quote-machine\"\n          >\n            <FontAwesomeIcon  icon={faGithub} size=\"md\"></FontAwesomeIcon>\n          </IconButton>\n        </footer>\n      </>\n    )\n  }\n}\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render( <App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}